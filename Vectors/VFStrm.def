{ Version 041102. Copyright © Alexey A.Chernobaev, 1996-2004 }
{
  Файловые потоки (интерфейс).

  File streams (interface part).
}

{$IFDEF BCB}
{$NODEFINE TVBaseStream}
{$ENDIF}

const
  { using uppercase to prevent name clash with Classes.fmCreate in C++ Builder }
  fmCREATE = $FFFF;
  BadHandle = -1;

type
  TVFileStream = class(TVBaseStream)
  { базовый файловый поток }
  { base file stream }
  protected
    FFileMode: Word;
    FFileName: String;
    {$IFDEF W_STREAM_WIN}
    FFileNameW: WideString;
    {$ENDIF}
    FHandle: Integer;
    FOwnHandle: Boolean;
    FSize, FPosition: ILong;
    function GetPos: ILong; override;
    procedure FSeek(Offset: ILong);
    function GetSize: ILong; override;
    procedure SetSize(NewSize: ILong); override;
    procedure OpenHandle(AMode: Word);
    procedure ReopenHandle;
    procedure Error(const Msg: String; Code: Integer);
    {$IFDEF W_STREAM_WIN}
    function GetFileName: String;
    {$ENDIF}
    {$IFDEF W_STREAM}
    function GetFileNameW: WideString;
    {$ENDIF}
    {$IFDEF V_32}
    //function GetLastWriteTime: TDateTime;
    {$IFDEF V_WIN}
    procedure SetLastWriteTime(Value: TDateTime);
    {$ENDIF} {V_WIN}
    {$ENDIF} {V_32}
  public
    constructor Create(const AFileName: String; Mode: Word);
    constructor CreateOnHandle(const AFileName: String; AHandle: Integer);
    {$IFDEF W_STREAM}
    constructor CreateW(const AFileName: WideString; Mode: Word);
    constructor CreateOnHandleW(const AFileName: WideString; AHandle: Integer);
    {$ENDIF}
    constructor CreateInherited;
    destructor Destroy; override;
    procedure Seek(Offset: ILong); override;
    procedure WriteProc(const Buffer; Count: Int32); override;
    function ReadFunc(var Buffer; Count: Int32): Int32; override;
    procedure CloseHandle; virtual;
    { закрывает файл, связанный с потоком; при необходимости файл будет открыт
      автоматически }
    { closes the file, associated with the stream; the file will be opened
      automatically if necessary }
    function HandleOpened: Boolean;
    { возвращает True, если файл, связанный с потоком, открыт, и False иначе }
    { returns True if the file associated with the stream is opened, otherwise
      False }
    function Flush: Boolean; virtual;
    { записывает на диск системный файловый буфер, связанный с потоком }
    { writes the system file buffer associated with the stream to the disk }
    function FileSize: ILong;
    { возвращает размер файла на диске в данный момент (он может отличаться от
      значения свойства Size, если файл был изменен другим процессом либо класс
      осуществляет буферизацию); после вызова FileSize значение свойства Size
      будет исправлено }
    { returns the current size of the file on a disk (it can differ from Size
      property value if the file was changed by another process or the stream
      class implements buffering); after calling FileSize the value of Size
      property will be corrected }
    {$IFDEF V_32}
    //property LastWriteTime: TDateTime read GetLastWriteTime
    //  {$IFDEF V_WIN}write SetLastWriteTime{$ENDIF};
    {$ENDIF}
    {$IFDEF W_STREAM_WIN}
    property FileName: String read GetFileName;
    {$ELSE}
    property FileName: String read FFileName;
    {$ENDIF}
    {$IFDEF W_STREAM}
    property FileNameW: WideString read GetFileNameW;
    {$ENDIF}
    property Handle: Integer read FHandle;
  end;

  TVBufFileStream = class(TVFileStream)
  { файловый поток с буферизацией }
  { buffered file stream }
  protected
    FLogicalOffset, { смещение непрочитанных данных относительно начала файла }
    FInBufferStart, { смещение начала FInBuffer относительно начала файла }
    FOutBufferStart: ILong; { смещение начала FOutBuffer относительно начала файла }
    FBufferSize, FInBufferSize, { размер буфера }
    FInBufferLength, { количество данных в FInBuffer }
    FOutBufferLength: Int32; { количество данных в FOutBuffer }
    FInBuffer, FOutBuffer: Pointer;
    function GetPos: ILong; override;
    function GetSize: ILong; override;
    procedure SetSize(NewSize: ILong); override;
    procedure Initialize(ABufferSize: Int32);
    procedure SetBufferSize(ABufferSize: Int32);
  public
    constructor Create(const AFileName: String; Mode: Word);
    { создает буферизованный файловый поток с размером буфера по умолчанию }
    { creates a buffered file stream with default buffer size }
    constructor CreateWithSize(const AFileName: String; Mode: Word; ABufferSize: Int32);
    { создает буферизованный файловый поток с заданным размером буфера }
    { creates a buffered file stream with specified buffer size }
    constructor CreateOnHandle(const AFileName: String; AHandle: Integer;
      ABufferSize: Int32{$IFDEF V_DEFAULTS} = DefaultBufferSize{$ENDIF});
    {$IFDEF W_STREAM}
    constructor CreateW(const AFileName: WideString; Mode: Word);
    constructor CreateWithSizeW(const AFileName: WideString; Mode: Word; ABufferSize: Int32);
    constructor CreateOnHandleW(const AFileName: WideString; AHandle: Integer;
      ABufferSize: Int32{$IFDEF V_DEFAULTS} = DefaultBufferSize{$ENDIF});
    {$ENDIF}
    destructor Destroy; override;
    procedure Seek(Offset: ILong); override;
    procedure DiscardReadBuffer;
    { сбрасывает буфер чтения }
    { discards the stream read buffer }
    procedure WriteBuffer;
    { записывает данные из буфера записи на диск }
    { writes data from the stream write buffer to disk }
    procedure EndWrite;
    { вызывает WriteBuffer, затем освобождает память, занятую под буфер записи;
      данный метод следует вызывать после того, как в поток записаны все данные
      и в дальнейшем этот поток будет использоваться только для чтения }
    { call WriteBuffer and then frees the memory allocated for the stream write
      buffer; this method should be used when all data are written to the stream
      and this stream will be used only for reading thereafter }
    procedure WriteProc(const Buffer; Count: Int32); override;
    function ReadFunc(var Buffer; Count: Int32): Int32; override;
    procedure CloseHandle; override;
    function Flush: Boolean; override;
    property BufferSize: Int32 read FBufferSize write SetBufferSize;
  end;
