{ Version 050602. Copyright © Alexey A.Chernobaev, 1996-2005 }
{
  Числовые векторы (реализация).
  Перед включением данного файла необходимо определить типы NumberType,
  TGenericNumberVector и PArrayType.

  Numeral vectors (implementation part).
  Types NumberType, TGenericNumberVector and PArrayType must be defined before
  including this file.
}

{$IFDEF INT64_VECT}
{$IFDEF V_DELPHI}
  {$IFDEF INT64_EQ_COMP}{$DEFINE FLOATDIV}{$ENDIF}
{$ENDIF}
{$ENDIF}
{$IFDEF FLOAT}{$DEFINE FLOATDIV}{$ENDIF}

procedure TNumberVector.Assign(Source: TVector);
begin
  if Source is TNumberVector then begin
    FDefaultValue:=TNumberVector(Source).FDefaultValue;
    RawAssign(Source);
  end
  else
    inherited Assign(Source);
end;

procedure TNumberVector.CopyRange(FromIndex: Integer; Source: TVector;
  SourceFrom, SourceTo: Integer);
begin
  if Source is TNumberVector then
    RawCopyRange(FromIndex, Source, SourceFrom, SourceTo)
  else
    inherited CopyRange(FromIndex, Source, SourceFrom, SourceTo);
end;

procedure TNumberVector.ExchangeRange(FromIndex, ToIndex, ACount: Integer);
begin
  RawExchangeRange(FromIndex, ToIndex, ACount)
end;

function TNumberVector.EqualTo(V: TVector): Bool;
begin
  if V is TNumberVector then
    Result:=RawEqualTo(V)
  else
    Result:=inherited EqualTo(V);
end;

procedure TNumberVector.Exchange(I, J: Integer);
var
  T: NumberType;
begin
  {$IFDEF CHECK_VECTORS}
  if (I < 0) or (I >= Count) then
    ErrorFmt(SRangeError_d, [I])
  else
    if (J < 0) or (J >= Count) then
      ErrorFmt(SRangeError_d, [J]);
  {$ENDIF}
  T:=PArrayType(FItems)^[I];
  PArrayType(FItems)^[I]:=PArrayType(FItems)^[J];
  PArrayType(FItems)^[J]:=T;
end;

{$IFNDEF SPECIAL_COMPARE}
function TNumberVector.Compare(I: Integer; const V): Int32;
var
  T: NumberType;
begin
  {$IFDEF CHECK_VECTORS}
  if (I < 0) or (I >= Count) then
    ErrorFmt(SRangeError_d, [I]);
  {$ENDIF}
  T:=PArrayType(FItems)^[I];
  if T < NumberType(V) then
    Result:=-1
  else
    if T > NumberType(V) then
      Result:=1
    else
      Result:=0;
end;
{$ENDIF}

procedure TNumberVector.SortRange(L, R: Integer);

  procedure DoSortRange(L, R: Integer);
  var
    I, J: Integer;
    T1, T2: NumberType;
  begin
    repeat
      I:=L;
      J:=R;
      T1:=PArrayType(FItems)^[(L + R) shr 1];
      repeat
        while PArrayType(FItems)^[I] < T1 do Inc(I);
        while PArrayType(FItems)^[J] > T1 do Dec(J);
        if I <= J then begin
          T2:=PArrayType(FItems)^[I];
          PArrayType(FItems)^[I]:=PArrayType(FItems)^[J];
          PArrayType(FItems)^[J]:=T2;
          Inc(I);
          Dec(J);
        end;
      until I > J;
      if L < J then
        DoSortRange(L, J);
      L:=I;
    until I >= R;
  end;

begin
  {$IFDEF CHECK_VECTORS}
  if L < 0 then
    ErrorFmt(SRangeError_d, [L]);
  if R >= Count then
    ErrorFmt(SRangeError_d, [R]);
  {$ENDIF}
  if L < R then
    DoSortRange(L, R);
end;

procedure TNumberVector.SortRangeDesc(L, R: Integer);

  procedure DoSortRangeDesc(L, R: Integer);
  var
    I, J: Integer;
    T1, T2: NumberType;
  begin
    repeat
      I:=L;
      J:=R;
      T1:=PArrayType(FItems)^[(L + R) shr 1];
      repeat
        while PArrayType(FItems)^[I] > T1 do Inc(I);
        while PArrayType(FItems)^[J] < T1 do Dec(J);
        if I <= J then begin
          T2:=PArrayType(FItems)^[I];
          PArrayType(FItems)^[I]:=PArrayType(FItems)^[J];
          PArrayType(FItems)^[J]:=T2;
          Inc(I);
          Dec(J);
        end;
      until I > J;
      if L < J then
        DoSortRangeDesc(L, J);
      L:=I;
    until I >= R;
  end;

begin
  {$IFDEF CHECK_VECTORS}
  if L < 0 then
    ErrorFmt(SRangeError_d, [L]);
  if R >= Count then
    ErrorFmt(SRangeError_d, [R]);
  {$ENDIF}
  if L < R then
    DoSortRangeDesc(L, R);
end;

procedure TNumberVector.SetToDefault;
begin
  InitMemory(0, FCount);
end;

procedure TNumberVector.FillValue(Value: NumberType);
begin
  FillMem(0, FCount, TBase(Value));
end;

function TNumberVector.GetValue(I: Integer): NumberType;
begin
  {$IFDEF CHECK_VECTORS}
  if (I < 0) or (I >= Count) then ErrorFmt(SRangeError_d, [I]);
  {$ENDIF}
  Result:=PArrayType(FItems)^[I];
end;

procedure TNumberVector.SetValue(I: Integer; Value: NumberType);
begin
  {$IFDEF CHECK_VECTORS}
  if (I < 0) or (I >= Count) then ErrorFmt(SRangeError_d, [I]);
  {$ENDIF}
  PArrayType(FItems)^[I]:=Value;
end;

{$IFDEF V_INLINE}
function TNumberVector.GetValueI(I: Integer): NumberType;
begin
  {$IFDEF CHECK_VECTORS}
  if (I < 0) or (I >= Count) then ErrorFmt(SRangeError_d, [I]);
  {$ENDIF}
  Result:=PArrayType(FItems)^[I];
end;

procedure TNumberVector.SetValueI(I: Integer; Value: NumberType);
begin
  {$IFDEF CHECK_VECTORS}
  if (I < 0) or (I >= Count) then ErrorFmt(SRangeError_d, [I]);
  {$ENDIF}
  PArrayType(FItems)^[I]:=Value;
end;
{$ENDIF}

procedure TNumberVector.Insert(I: Integer; Value: NumberType);
begin
  Expand(I);
  PArrayType(FItems)^[I]:=Value;
end;

function TNumberVector.IndexFrom(I: Integer; Value: NumberType): Integer;
begin
  Result:=IndexOfBaseValue(I, TBase(Value));
end;

function TNumberVector.LastIndexFrom(I: Integer; Value: NumberType): Integer;
begin
  Result:=LastIndexOfBaseValue(I, TBase(Value));
end;

function TNumberVector.NumberOfValues(Value: NumberType): Integer;
begin
  Result:=CountValuesEqualTo(TBase(Value));
end;

procedure TNumberVector.ConcatenateWith(V: TGenericNumberVector);
var
  OldCount, VCount: Integer;
begin
  if ClassType = V.ClassType then begin
    OldCount:=Count;
    VCount:=V.Count;
    Count:=OldCount + VCount;
    System.Move(PArrayType(TNumberVector(V).FItems)^[0],
      PArrayType(FItems)^[OldCount], VCount * ElemSize);
  end
  else
    inherited ConcatenateWith(V);
end;

procedure TNumberVector.AddScalar(T: NumberType);
begin
  VectProcs[AddScalarCode](FItems^, T, FCount);
end;

procedure TNumberVector.SubScalar(T: NumberType);
begin
  VectProcs[SubScalarCode](FItems^, T, FCount);
end;

procedure TNumberVector.AddVector(V: TGenericNumberVector);
begin
  {$IFDEF CHECK_VECTORS}
  if Count <> V.Count then ErrorFmt(SWrongVectorSize_d, [V.Count]);
  {$ENDIF}
  if ClassType = V.ClassType then
    VectProcs[AddVectCode](FItems^, TNumberVector(V).FItems^, FCount)
  else
    inherited AddVector(V);
end;

procedure TNumberVector.AddScaled(Factor: NumberType; V: TGenericNumberVector);
{$IFNDEF FLOAT}
var
  I: Integer;
{$ENDIF}
begin
  {$IFDEF CHECK_VECTORS}
  if Count <> V.Count then ErrorFmt(SWrongVectorSize_d, [V.Count]);
  {$ENDIF}
  if ClassType = V.ClassType then
    {$IFDEF FLOAT}
    AddScaledProcs[AddScaledCode](FItems^, TNumberVector(V).FItems^, FCount, Factor)
    {$ELSE}
    for I:=0 to FCount - 1 do
      PArrayType(FItems)^[I]:=PArrayType(FItems)^[I] +
        Factor * PArrayType(TNumberVector(V).FItems)^[I]
    {$ENDIF}
  else
    inherited AddScaled(Factor, V);
end;

procedure TNumberVector.SubVector(V: TGenericNumberVector);
begin
  {$IFDEF CHECK_VECTORS}
  if Count <> V.Count then ErrorFmt(SWrongVectorSize_d, [V.Count]);
  {$ENDIF}
  if ClassType = V.ClassType then
    VectProcs[SubVectCode](FItems^, TNumberVector(V).FItems^, FCount)
  else
    inherited SubVector(V);
end;

{$IFDEF NOWARN}{$WARNINGS OFF}{$ENDIF}
function TNumberVector.Min: NumberType;
var
  I: Integer;
  T: NumberType;
begin
  if FCount > 0 then begin
    Result:=PArrayType(FItems)^[0];
    for I:=1 to FCount - 1 do begin
      T:=PArrayType(FItems)^[I];
      if T < Result then
        Result:=T;
    end;
  end
  else
    Error(SWrongVectorSize_d);
end;

function TNumberVector.Max: NumberType;
var
  I: Integer;
  T: NumberType;
begin
  if FCount > 0 then begin
    Result:=PArrayType(FItems)^[0];
    for I:=1 to FCount - 1 do begin
      T:=PArrayType(FItems)^[I];
      if T > Result then
        Result:=T;
    end;
  end
  else
    Error(SWrongVectorSize_d);
end;

function TNumberVector.MinIndexFrom(I: Integer; var MinValue: NumberType): Integer;
var
  J: Integer;
  T: NumberType;
  P: ^NumberType;
begin
  if FCount > 0 then begin
    {$IFDEF CHECK_VECTORS}
    if (I < 0) or (I >= Count) then ErrorFmt(SRangeError_d, [I]);
    {$ENDIF}
    P:=@PArrayType(FItems)^[I];
    MinValue:=P^;
    Result:=I;
    for J:=I + 1 to FCount - 1 do begin
      Inc(P);
      T:=P^;
      if T < MinValue then begin
        MinValue:=T;
        Result:=J;
      end;
    end;
  end
  else
    Error(SWrongVectorSize_d);
end;

function TNumberVector.MaxIndexFrom(I: Integer; var MaxValue: NumberType): Integer;
var
  J: Integer;
  T: NumberType;
  P: ^NumberType;
begin
  if FCount > 0 then begin
    {$IFDEF CHECK_VECTORS}
    if (I < 0) or (I >= Count) then ErrorFmt(SRangeError_d, [I]);
    {$ENDIF}
    P:=@PArrayType(FItems)^[I];
    MaxValue:=P^;
    Result:=I;
    for J:=I + 1 to FCount - 1 do begin
      Inc(P);
      T:=P^;
      if T > MaxValue then begin
        MaxValue:=T;
        Result:=J;
      end;
    end;
  end
  else
    Error(SWrongVectorSize_d);
end;

{$IFDEF NOWARN}{$WARNINGS ON}{$ENDIF}

{$IFNDEF INT64_VECT}

{$IFDEF FLOAT}
function TNumberVector.Sum: Float80;
begin
  Result:=VectFuncsFloat80[SumVectCode](FItems^, FItems^, FCount);
end;
{$ELSE}
function TNumberVector.Sum: {$IFDEF UINT} UInt32 {$ELSE} Int32 {$ENDIF};
begin
  Result:=VectFuncsInt32[SumVectCode](FItems^, FItems^, FCount);
end;
{$ENDIF}

{$IFDEF FLOAT}
function TNumberVector.SqrSum: Float80;
begin
  Result:=VectFuncsFloat80[SqrSumVectCode](FItems^, FItems^, FCount);;
end;
{$ELSE}
function TNumberVector.SqrSum: UInt32;
var
  I: Integer;
begin
  Result:=0;
  for I:=0 to FCount - 1 do Result:=Result + UInt32(Sqr(PArrayType(FItems)^[I]));
end;
{$ENDIF}

{$ENDIF} {INT64_VECT}

procedure TNumberVector.DivScalar(T: NumberType);
{$IFDEF FLOAT}
begin
  MulScalar(1 / T);
end;
{$ELSE}
begin
  VectProcs[DivScalarCode](FItems^, T, FCount);
end;
{$ENDIF}

procedure TNumberVector.ArithmeticProgression(A0, D: NumberType);
var
  ACount, I: Integer;
begin
  ACount:=Count;
  if ACount > 0 then begin
    PArrayType(FItems)^[0]:=A0;
    for I:=1 to ACount - 1 do begin
      A0:=A0 + D;
      PArrayType(FItems)^[I]:=A0;
    end;
  end;
end;

procedure TNumberVector.Mul(V: TGenericNumberVector);
{$IFNDEF FLOAT}
var
  I: Integer;
{$ENDIF}
begin
  if ClassType = V.ClassType then
    {$IFDEF FLOAT}
    VectProcs[MulCode](FItems^, TNumberVector(V).FItems^, FCount)
    {$ELSE}
    for I:=0 to FCount - 1 do
      PArrayType(FItems)^[I]:=PArrayType(FItems)^[I] *
        PArrayType(TNumberVector(V).FItems)^[I]
    {$ENDIF}
  else
    inherited Mul(V);
end;

procedure TNumberVector.Divide(V: TGenericNumberVector);
{$IFNDEF FLOAT}
var
  I: Integer;
{$ENDIF}
begin
  if ClassType = V.ClassType then
    {$IFDEF FLOAT}
    VectProcs[DivCode](FItems^, TNumberVector(V).FItems^, FCount)
    {$ELSE}
    for I:=0 to FCount - 1 do
      PArrayType(FItems)^[I]:=PArrayType(FItems)^[I]{$IFDEF FLOATDIV}/{$ELSE}div{$ENDIF}
        PArrayType(TNumberVector(V).FItems)^[I]
    {$ENDIF}
  else
    inherited Divide(V);
end;

procedure TNumberVector.MulScalar(T: NumberType);
begin
  VectProcs[MulScalarCode](FItems^, T, FCount);
end;

function TNumberVector.DotProduct(V: TGenericNumberVector):
{$IFDEF FLOAT} Float80 {$ELSE}
  {$IFDEF INT64_VECT} Int64 {$ELSE}
    {$IFDEF UINT} UInt32 {$ELSE} Int32 {$ENDIF} {$ENDIF} {$ENDIF};
{$IFNDEF FLOAT}{$IFNDEF SPECIAL_DOT_PRODUCT}
var
  I: Integer;
{$ENDIF}{$ENDIF}
begin
  {$IFDEF CHECK_VECTORS}
  if Count <> V.Count then ErrorFmt(SWrongVectorSize_d, [V.Count]);
  {$ENDIF}
  if ClassType = V.ClassType then begin
    {$IFDEF FLOAT}
    Result:=VectFuncsFloat80[DotProductCode](FItems^, TNumberVector(V).FItems^, FCount);
    {$ELSE}
    {$IFDEF SPECIAL_DOT_PRODUCT}
    Result:=VectFuncsInt32[DotProductCode](FItems^, TNumberVector(V).FItems^, Count)
    {$ELSE}
    Result:=0;
    for I:=0 to FCount - 1 do
      Result:=Result +
        {$IFNDEF INT64_VECT} {$IFDEF UINT} UInt32 {$ELSE} Int32 {$ENDIF} {$ENDIF}
        (PArrayType(FItems)^[I]) * PArrayType(TNumberVector(V).FItems)^[I];
    {$ENDIF}
    {$ENDIF}
  end
  else
    Result:=inherited DotProduct(V);
end;

function TNumberVector.ScrEuclidianMetric(V: TGenericNumberVector):
{$IFDEF FLOAT} Float80 {$ELSE}
  {$IFDEF INT64_VECT} Int64 {$ELSE} UInt32 {$ENDIF} {$ENDIF};
var
  I: Integer;
begin
  {$IFDEF CHECK_VECTORS}
  if Count <> V.Count then ErrorFmt(SWrongVectorSize_d, [V.Count]);
  {$ENDIF}
  if ClassType = V.ClassType then begin
    Result:=0;
    for I:=0 to FCount - 1 do
      Result:=Result + {$IFNDEF FLOAT}{$IFNDEF INT64_VECT}UInt32{$ENDIF}{$ENDIF}
        (Sqr(PArrayType(FItems)^[I] - PArrayType(TNumberVector(V).FItems)^[I]));
  end
  else
    Result:=inherited ScrEuclidianMetric(V);
end;

function TNumberVector.RectangularMetric(V: TGenericNumberVector):
{$IFDEF FLOAT} Float80 {$ELSE}
  {$IFDEF INT64_VECT} Int64 {$ELSE} UInt32 {$ENDIF} {$ENDIF};
var
  I: Integer;
begin
  {$IFDEF CHECK_VECTORS}
  if Count <> V.Count then ErrorFmt(SWrongVectorSize_d, [V.Count]);
  {$ENDIF}
  if ClassType = V.ClassType then begin
    Result:=0;
    for I:=0 to FCount - 1 do
      Result:=Result + {$IFNDEF FLOAT}{$IFNDEF INT64_VECT}UInt32{$ENDIF}{$ENDIF}
        (Abs(PArrayType(FItems)^[I] - PArrayType(TNumberVector(V).FItems)^[I]));
  end
  else
    Result:=inherited RectangularMetric(V);
end;

{$IFNDEF CHECK_VECTORS}
function TNumberVector.IncItem(I: Integer; Value: NumberType): NumberType;
begin
  Result:=PArrayType(FItems)^[I] + Value;
  PArrayType(FItems)^[I]:=Result;
end;

function TNumberVector.DecItem(I: Integer; Value: NumberType): NumberType;
begin
  Result:=PArrayType(FItems)^[I] - Value;
  PArrayType(FItems)^[I]:=Result;
end;

function TNumberVector.MulItem(I: Integer; Value: NumberType): NumberType;
begin
  Result:=PArrayType(FItems)^[I] * Value;
  PArrayType(FItems)^[I]:=Result;
end;

function TNumberVector.DivItem(I: Integer; Value: NumberType): NumberType;
begin
  Result:=PArrayType(FItems)^[I]{$IFDEF FLOATDIV}/{$ELSE}div{$ENDIF}Value;
  PArrayType(FItems)^[I]:=Result;
end;

{$IFNDEF FLOAT}{$IFNDEF INT64_VECT}
function TNumberVector.OrItem(I: Integer; Value: NumberType): NumberType;
begin
  Result:=PArrayType(FItems)^[I] or Value;
  PArrayType(FItems)^[I]:=Result;
end;

function TNumberVector.XorItem(I: Integer; Value: NumberType): NumberType;
begin
  Result:=PArrayType(FItems)^[I] xor Value;
  PArrayType(FItems)^[I]:=Result;
end;

function TNumberVector.AndItem(I: Integer; Value: NumberType): NumberType;
begin
  Result:=PArrayType(FItems)^[I] and Value;
  PArrayType(FItems)^[I]:=Result;
end;

function TNumberVector.NotItem(I: Integer): NumberType;
begin
  Result:=not PArrayType(FItems)^[I];
  PArrayType(FItems)^[I]:=Result;
end;
{$ENDIF}{$ENDIF}
{$ENDIF}

{$UNDEF FLOATDIV}

{ end }
