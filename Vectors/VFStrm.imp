{ Version 050702. Copyright © Alexey A.Chernobaev, 1996-2005 }
{
  Файловые потоки (реализация).

  File streams (implementation part).
}

{$IFDEF CHECK_OBJECTS_FREE}
uses ChckFree;
{$ENDIF}

{ TVFileStream }

procedure TVFileStream.Error(const Msg: String; Code: Integer);
{$IFDEF V_DELPHI}{$IFDEF WIN32}
  function ReturnAddr: Pointer;
  asm
    MOV    EAX, [EBP+4]
  end;
{$ENDIF}{$ENDIF}
var
  S: String;
  Ex: EVFileStream;
begin
  S:=Msg;
  if (S <> '') and (S[1] in ['A'..'Z']) then
    S[1]:=Chr(Ord(S[1]) + (Ord('a') - Ord('A'))); { LoCase }
  Ex:=EVFileStream.Create('Class ' + ClassName + ' (file "' + FileName + '"): ' + S);
  Ex.Code:=Code;
  {$IFDEF V_32}
  {$IFNDEF LINUX}
  //Ex.LastOSError:=GetLastError;
  {$ENDIF}
  {$ENDIF}
  Ex.FileName:={$IFDEF W_STREAM_WIN}FileNameW{$ELSE}FileName{$ENDIF};
  Ex.RaisedByClass:=ClassName;
  Ex.SimpleMessage:=Msg;
  raise Ex{$IFDEF V_DELPHI}{$IFDEF WIN32}at ReturnAddr{$ENDIF}{$ENDIF};
end;

constructor TVFileStream.CreateOnHandle(const AFileName: String; AHandle: Integer);
begin
  {$IFDEF CHECK_OBJECTS_FREE}
  RegisterObjectCreate(Self);
  {$ENDIF}
  inherited Create;
  FFileName:=AFileName;
  FHandle:=AHandle;
  FSize:=-1;
  {$IFDEF WIN32}
  GetSize;
  {$ENDIF}
end;

{$IFDEF W_STREAM}
constructor TVFileStream.CreateOnHandleW(const AFileName: WideString; AHandle: Integer);
begin
  {$IFDEF CHECK_OBJECTS_FREE}
  RegisterObjectCreate(Self);
  {$ENDIF}
  inherited Create;
  {$IFDEF W_STREAM_WIN}
  FFileNameW:=AFileName;
  {$ENDIF}
  FHandle:=AHandle;
  {$IFDEF WIN32}
  FileSize;
  {$ELSE}
  FSize:=-1;
  {$ENDIF}
end;

{$IFDEF W_STREAM_WIN}
function TVFileStream.GetFileName: String;
begin
  if FFileNameW <> '' then
    Result:=FFileNameW
  else
    Result:=FFileName;
end;
{$ENDIF} {W_STREAM_WIN}

function TVFileStream.GetFileNameW: WideString;
begin
  {$IFDEF W_STREAM_WIN}
  if FFileNameW <> '' then
    Result:=FFileNameW
  else
  {$ENDIF}
    Result:=FFileName;
end;
{$ENDIF} {W_STREAM}

constructor TVFileStream.CreateInherited;
begin
  {$IFDEF CHECK_OBJECTS_FREE}
  RegisterObjectCreate(Self);
  {$ENDIF}
  inherited Create;
end;

destructor TVFileStream.Destroy;
begin
  {$IFDEF CHECK_OBJECTS_FREE}
  RegisterObjectFree(Self);
  {$ENDIF}
  CloseHandle;
  inherited Destroy;
end;

function TVFileStream.GetSize: ILong;
begin
  if FSize < 0 then
    Result:=FileSize
  else
    Result:=FSize;
end;

procedure TVFileStream.OpenHandle(AMode: Word);
{$IFDEF W_STREAM_WIN}
const
  AccessMode: array[0..2] of DWORD = (
    DWORD(GENERIC_READ), { DWORD() - for Delphi 3 }
    GENERIC_WRITE,
    DWORD(GENERIC_READ or GENERIC_WRITE));
  ShareMode: array[0..4] of DWORD = (
    0,
    0,
    FILE_SHARE_READ,
    FILE_SHARE_WRITE,
    FILE_SHARE_READ or FILE_SHARE_WRITE);
{$ENDIF}
begin
  {$IFDEF W_STREAM_WIN}
  if FFileNameW <> '' then
    if AMode = fmCreate then
      FHandle:=Integer(CreateFileW(PWideChar(UNCPath(FFileNameW)),
        GENERIC_READ or GENERIC_WRITE, 0, nil, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0))
    else
      FHandle:=Integer(CreateFileW(PWideChar(UNCPath(FFileNameW)), AccessMode[AMode and 3],
        ShareMode[(AMode and $F0) shr 4], nil, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0))
  else
  {$ENDIF}
    if AMode = fmCreate then
      FHandle:=FileCreate(FFileName)
    else
      FHandle:=FileOpen(FFileName, AMode);
    if FHandle = BadHandle then
      if AMode = fmCreate then
        Error(SFileCreateError, CFileCreateError)
      else
        Error(SFileOpenError, CFileOpenError);
  FOwnHandle:=True;
end;

procedure TVFileStream.CloseHandle;
begin
  if FHandle <> BadHandle then begin
    if FOwnHandle then
      {$IFDEF WIN32}
      Windows.CloseHandle(FHandle);
      {$ELSE}
      FileClose(FHandle);
      {$ENDIF}
    FHandle:=BadHandle;
  end;
  FSize:=-1;
end;

function TVFileStream.HandleOpened: Boolean;
begin
  Result:=FHandle <> BadHandle;
end;

procedure TVFileStream.ReopenHandle;
begin
  if FFileMode = fmCreate then
    OpenHandle(fmOpenReadWrite)
  else
    OpenHandle(FFileMode);
  FSeek(FPosition);
end;

function TVFileStream.GetPos: ILong;
begin
  Result:=FPosition;
end;

{$IFDEF FLOAT_ILONG}
function FileSeek(Handle: Integer; Ofs: ILong; Method: Integer): Integer;
begin
  Result:=0;
  if (SetFilePointer(Handle, QWordRec(Ofs).Lo, @QWordRec(Ofs).Hi, Method) = $FFFFFFFF) and
    (GetLastError <> NO_ERROR)
  then
    Dec(Result);
end;
{$ENDIF}

procedure TVFileStream.FSeek(Offset: ILong);
begin
  { GetSize opens the handle if necessary }
  if Offset <= GetSize then
    if FileSeek(FHandle, Offset, 0) < 0 then
      {$IFDEF FLOAT_ILONG}
      Error(SFileSeekError, CFileSeekError)
      {$ELSE}
      Error(Format(SFileSeekError_d, [Offset]), CFileSeekError)
      {$ENDIF}
    else
  else
    {$IFDEF FLOAT_ILONG}
    Error(SSeekError, 0);
    {$ELSE}
    Error(Format(SSeekError_d, [Offset]), 0);
    {$ENDIF}
end;

procedure TVFileStream.Seek(Offset: ILong);
begin
  if FPosition <> Offset then begin
    FSeek(Offset);
    FPosition:=Offset;
  end;
end;

procedure TVFileStream.SetSize(NewSize: ILong);
{$IFDEF V_FREEPASCAL}
const
  BufSize = 32768;
var
  I, BytesToWrite: Integer;
  Buf: Pointer;
{$ENDIF}
begin
  {$IFDEF W_STREAM_WIN}
  if FHandle = BadHandle then
    ReopenHandle;
  if not ((FileSeek(FHandle, NewSize, 0) >= 0) and SetEndOfFile(FHandle)) then
    Error(SFileSetSizeError, CFileSetSizeError);
  if NewSize <= FPosition then
    FPosition:=NewSize
  else
    FSeek(FPosition);
  {$ELSE}{$IFDEF V_FREEPASCAL}
  if NewSize < Size then begin
    if not FileTruncate(FHandle, NewSize) then
      Error(SFileSetSizeError, CFileSetSizeError);
    if NewSize <= FPosition then
      FPosition:=NewSize;
    FSeek(FPosition);
  end
  else
    if NewSize > FSize then begin
      FSeek(FSize);
      BytesToWrite:=NewSize - FSize;
      GetMem(Buf, BufSize);
      try
        repeat
          if BytesToWrite >= BufSize then
            I:=BufSize
          else
            I:=BytesToWrite;
          if FileWrite(FHandle, Buf, I) <> I then
            Error(SFileSetSizeError, CFileSetSizeError);
          Dec(BytesToWrite, I);
        until BytesToWrite <= 0;
      finally
        FreeMem(Buf);
      end;
      FSeek(FPosition);
    end;
  {$ELSE}{Delphi 1.0}
  if NewSize = 0 then begin
    CloseHandle;
    if not DeleteFile(FFileName) then
      Error(SFileSetSizeError, CFileSetSizeError);
    OpenHandle(FFileMode);
    FPosition:=0;
  end
  else
    Error(SNotImplemented, 0);
  {$ENDIF}{$ENDIF}
  FSize:=NewSize;
end;

procedure TVFileStream.WriteProc(const Buffer; Count: Int32);
{$IFDEF W_STREAM_WIN}
var
  Written: {$IFDEF V_D4}DWORD{$ELSE}Integer{$ENDIF};
{$ENDIF}
begin
  if FHandle = BadHandle then
    ReopenHandle;
  {$IFDEF W_STREAM_WIN}
  if not WriteFile(FHandle, Buffer, Count, Written, nil) or
    (Int32(Written) <> Count) then
      Error(SFileWriteError, CFileWriteError);
  {$ELSE}
  if FileWrite(FHandle, Buffer, Count) <> Count then
    Error(SFileWriteError, CFileWriteError);
  {$ENDIF}
  FPosition:=FPosition + Count;
  if FPosition > FSize then
    FSize:=FPosition;
end;

function TVFileStream.ReadFunc(var Buffer; Count: Int32): Int32;
begin
  if FHandle = BadHandle then
    ReopenHandle;
  {$IFDEF W_STREAM_WIN}
  if not ReadFile(FHandle, Buffer, Count,
    {$IFDEF V_D4}DWORD{$ELSE}Integer{$ENDIF}(Result), nil)
  then
    Error(SFileReadError, CFileReadError);
  {$ELSE}
  Result:=FileRead(FHandle, Buffer, Count);
  if Result < 0 then
    Error(SFileReadError, CFileReadError);
  {$ENDIF}
  FPosition:=FPosition + Result;
  if FReadFilter <> nil then
    FReadFilter.OnRead(Self, Buffer, Result);
end;

function TVFileStream.Flush: Boolean;
begin
  {$IFDEF WIN32}
  Result:=FlushFileBuffers(FHandle);
  {$ELSE}
  if FHandle <> BadHandle then begin
    CloseHandle;
    ReopenHandle;
  end;
  Result:=True;
  {$ENDIF}
end;

{$IFDEF V_32}

{$IFDEF V_WIN}
function TVFileStream.GetLastWriteTime: TDateTime;
var
  FileTime: TFileTime;
begin
  if FHandle = BadHandle then
    ReopenHandle;
  if GetFileTime(FHandle, nil, nil, @FileTime) then
    Result:=FileTimeToLocalDateTime(FileTime)
  else
    Result:=0;
end;

procedure TVFileStream.SetLastWriteTime(Value: TDateTime);
var
  FileTime: TFileTime;
begin
  if FHandle = BadHandle then
    ReopenHandle;
  FileTime:=LocalDateTimeToFileTime(Value);
  SetFileTime(FHandle, nil, nil, @FileTime);
end;
{$ENDIF} {V_WIN}

{$IFDEF LINUX}

{$ENDIF} {LINUX}

{$ENDIF} {V_32}

{ TVBufFileStream }

constructor TVBufFileStream.Create(const AFileName: String; Mode: Word);
begin
  inherited Create(AFileName, Mode);
  Initialize(DefaultBufferSize);
end;

constructor TVBufFileStream.CreateWithSize(const AFileName: String; Mode: Word;
  ABufferSize: Int32);
begin
  inherited Create(AFileName, Mode);
  Initialize(ABufferSize);
end;

constructor TVBufFileStream.CreateOnHandle(const AFileName: String; AHandle: Integer;
  ABufferSize: Int32{$IFDEF V_DEFAULTS} = DefaultBufferSize{$ENDIF});
begin
  inherited CreateOnHandle(AFileName, AHandle);
  Initialize(ABufferSize);
end;

{$IFDEF W_STREAM}
constructor TVBufFileStream.CreateW(const AFileName: WideString; Mode: Word);
begin
  inherited CreateW(AFileName, Mode);
  Initialize(DefaultBufferSize);
end;

constructor TVBufFileStream.CreateWithSizeW(const AFileName: WideString;
  Mode: Word; ABufferSize: Int32);
begin
  inherited CreateW(AFileName, Mode);
  Initialize(ABufferSize);
end;

constructor TVBufFileStream.CreateOnHandleW(const AFileName: WideString;
  AHandle: Integer; ABufferSize: Int32{$IFDEF V_DEFAULTS} = DefaultBufferSize{$ENDIF});
begin
  inherited CreateOnHandleW(AFileName, AHandle);
  Initialize(ABufferSize);
end;
{$ENDIF}

procedure TVBufFileStream.Initialize(ABufferSize: Int32);
begin
  if ABufferSize <= 0 then
    Error(SErrorInParameters, 0);
  FBufferSize:=ABufferSize;
end;

procedure TVBufFileStream.SetBufferSize(ABufferSize: Int32);
begin
  if FBufferSize <> ABufferSize then begin
    WriteBuffer;
    FInBufferLength:=0; { необходимо сбросить буфер чтения }
    if FInBuffer <> nil then begin
      FreeMem(FInBuffer, FInBufferSize);
      FInBuffer:=nil;
    end;
    if FOutBuffer <> nil then begin
      FreeMem(FOutBuffer, FBufferSize);
      FOutBuffer:=nil;
    end;
    Initialize(ABufferSize);
  end;
end;

destructor TVBufFileStream.Destroy;
begin
  try
    WriteBuffer;
  finally
    {$IFDEF V_FREEMEM_NIL}
    FreeMem(FInBuffer);
    FreeMem(FOutBuffer);
    {$ELSE}
    if FInBuffer <> nil then
      FreeMem(FInBuffer, FInBufferSize);
    if FOutBuffer <> nil then
      FreeMem(FOutBuffer, FBufferSize);
    {$ENDIF}
    inherited Destroy;
  end;
end;

function TVBufFileStream.GetPos: ILong;
begin
  Result:=FLogicalOffset;
end;

function TVBufFileStream.GetSize: ILong;
var
  L: ILong;
begin
  L:=FOutBufferStart + FOutBufferLength;
  Result:=inherited GetSize;
  if L > Result then
    Result:=L;
end;

procedure TVBufFileStream.SetSize(NewSize: ILong);
begin
  WriteBuffer;
  FInBufferLength:=0; { необходимо сбросить буфер чтения }
  inherited SetSize(NewSize);
  if NewSize < FLogicalOffset then
    FLogicalOffset:=NewSize;
end;

procedure TVBufFileStream.Seek(Offset: ILong);
begin
  if (Offset < 0) or (Offset > GetSize) then
    Error('seek error (' + {$IFDEF FLOAT_ILONG}FloatToStr{$ELSE}IntToStr{$ENDIF}(Offset) + ')', 0);
  FLogicalOffset:=Offset;
end;

procedure TVBufFileStream.DiscardReadBuffer;
begin
  FInBufferLength:=0;
end;

procedure TVBufFileStream.WriteBuffer;
begin
  if FOutBufferLength > 0 then begin
    inherited Seek(FOutBufferStart);
    inherited WriteProc(FOutBuffer^, FOutBufferLength);
    FOutBufferLength:=0;
    FInBufferLength:=0; { необходимо сбросить буфер чтения }
  end;
end;

procedure TVBufFileStream.EndWrite;
begin
  WriteBuffer;
  if FOutBuffer <> nil then begin
    FreeMem(FOutBuffer, FBufferSize);
    FOutBuffer:=nil;
  end;
end;

procedure TVBufFileStream.WriteProc(const Buffer; Count: Int32);
var
  L: ILong;
begin
  { сбрасываем буфер чтения при необходимости }
  if (FInBufferStart >= FLogicalOffset) and
    (FInBufferStart < FLogicalOffset + Count) or
    (FLogicalOffset >= FInBufferStart) and
    (FLogicalOffset < FInBufferStart + FInBufferLength)
  then
    FInBufferLength:=0;
  { выполняем запись в буфер или на диск }
  if (FLogicalOffset < FOutBufferStart) or
    (FLogicalOffset > FOutBufferStart + FOutBufferLength) then
  begin
    WriteBuffer;
    inherited Seek(FLogicalOffset);
    FOutBufferStart:=FLogicalOffset;
  end;
  L:=FLogicalOffset - FOutBufferStart;
  if Count <= FBufferSize - L then begin
    if FOutBuffer = nil then
      GetMem(FOutBuffer, FBufferSize);
    Move(Buffer, (PChar(FOutBuffer) + {$IFDEF FLOAT_ILONG}Round{$ENDIF}(L))^, Count);
    FLogicalOffset:=FLogicalOffset + Count;
    L:=FLogicalOffset - FOutBufferStart;
    if L > FOutBufferLength then
      FOutBufferLength:={$IFDEF FLOAT_ILONG}Round{$ENDIF}(L);
  end
  else begin
    FOutBufferLength:={$IFDEF FLOAT_ILONG}Round{$ENDIF}(L);
    WriteBuffer;
    inherited WriteProc(Buffer, Count - FOutBufferLength);
    FLogicalOffset:=FLogicalOffset + Count;
    FOutBufferStart:=FLogicalOffset;
  end;
  if FLogicalOffset > FSize then
    FSize:=FLogicalOffset;
end;

function TVBufFileStream.ReadFunc(var Buffer; Count: Int32): Int32;
var
  L: ILong;
  I, Sz, BufferCount, BufferShift: Int32;
  B: Boolean;
  P, OutP: PChar;
  SaveFilter: TReadFilter;
begin
  if FLogicalOffset + Count >= Size then
    Count:={$IFDEF FLOAT_ILONG}Round{$ENDIF}(FSize - FLogicalOffset);
  if Count <= 0 then begin
    Result:=0;
    Exit;
  end;
  SaveFilter:=FReadFilter;
  FReadFilter:=nil; { в буфере должны находиться "сырые" данные }
  try
    { сбрасываем буфер записи при необходимости }
    if (FOutBufferStart + FOutBufferLength > FLogicalOffset) and
      (FOutBufferStart < FLogicalOffset + Count)
    then
      WriteBuffer;
    B:=FLogicalOffset < FInBufferStart;
    if B or (FLogicalOffset >= FInBufferStart + FInBufferLength) then begin
      L:=FLogicalOffset;
      if B then begin
        L:=L - FBufferSize div 4; { "упреждающее" чтение }
        if L < 0 then
          L:=0;
      end;
      inherited Seek(L);
      Sz:=FBufferSize;
      if Sz > FSize then
        Sz:={$IFDEF FLOAT_ILONG}Round{$ENDIF}(FSize);
      if FInBuffer = nil then begin
        GetMem(FInBuffer, Sz);
        FInBufferSize:=Sz;
      end
      else
        if FInBufferSize < Sz then begin
          {$IFDEF V_32}
          ReAllocMem(FInBuffer, Sz);
          {$ELSE}
          FInBuffer:=ReAllocMem(FInBuffer, FInBufferSize, Sz);
          {$ENDIF}
          FInBufferSize:=Sz;
        end;
      FInBufferLength:=inherited ReadFunc(FInBuffer^, FInBufferSize);
      FInBufferStart:=L;
    end;
    L:=FLogicalOffset - FInBufferStart;
    BufferCount:=FInBufferLength - {$IFDEF FLOAT_ILONG}Round{$ENDIF}(L);
    P:=PChar(FInBuffer) + {$IFDEF FLOAT_ILONG}Round{$ENDIF}(L);
    if Count <= BufferCount then begin
      Move(P^, Buffer, Count);
      Result:=Count;
    end
    else begin
      Move(P^, Buffer, BufferCount);
      inherited Seek(FLogicalOffset + BufferCount);
      OutP:=PChar(@Buffer) + BufferCount;
      Dec(Count, BufferCount);
      BufferShift:={$IFDEF FLOAT_ILONG}Round(L / 2){$ELSE}L div 2{$ENDIF};
      if BufferShift > 0 then begin { сдвигаем буфер }
        FInBufferStart:=FInBufferStart + BufferShift;
        P:=PChar(FInBuffer) + BufferShift;
        I:=FInBufferLength - BufferShift;
        Move(P^, FInBuffer^, I);
        P:=PChar(FInBuffer) + I;
        FInBufferLength:=I;
        I:=FInBufferSize - I;
        if I > Count then begin
          I:=inherited ReadFunc(P^, I);
          if I < Count then
            Count:=I;
          Move(P^, OutP^, Count);
        end
        else begin
          Count:=inherited ReadFunc(OutP^, Count);
          if I > Count then
            I:=Count;
          Move(OutP^, P^, I);
        end;
        Inc(FInBufferLength, I);
      end
      else
        Count:=inherited ReadFunc(OutP^, Count);
      Result:=BufferCount + Count;
    end;
    FLogicalOffset:=FLogicalOffset + Result;
  finally
    FReadFilter:=SaveFilter;
  end;
  if FReadFilter <> nil then
    FReadFilter.OnRead(Self, Buffer, Result);
end;

function TVBufFileStream.Flush: Boolean;
begin
  WriteBuffer;
  Result:=inherited Flush;
end;

procedure TVBufFileStream.CloseHandle;
begin
  WriteBuffer;
  inherited CloseHandle;
end;

{ end }
